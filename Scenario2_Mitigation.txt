#include <ESP8266WiFi.h>
#include <ESPAsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <DHT.h>
#include <BearSSLHelpers.h>

// WiFi credentials
const char* ssid = "Home_2.4";
const char* password = "0355730218";

// ThingSpeak API information
const char* host = "api.thingspeak.com";
const char* apiKey = "USQ5U92IH9STX55F";

// DHT sensor setup (DHT112, PIN11)
#define DHTPIN 12 // DHT sensor pin
#define DHTTYPE DHT11 // DHT sensor type

// Initialize DHT sensor
DHT dht(DHTPIN, DHTTYPE);

// Initialize WiFi client and server
WiFiClient client;
AsyncWebServer server(80);

// Variables to store sensor readings
float humidity = 0;
float temperature = 0;

// Valid credentials for authentication (This is a fixed setup)
const char* validUsername = "admin";
const char* validPassword = "2887e1c165893d5459ab1e86ca2f598f1a099bb726d44c145a3e333d82b21c84"; //hashed password appl30fmyEYE

// Only Three Attempts Allowed
const int maxAttempts = 3;

// Function prototypes
bool authenticate();
void connectToWiFi();

// Timer variables for data collection every 15 seconds. (I adjusted this to better fit my sensor)
unsigned long previousMillis = 0;
const long interval = 15000; // Interval to collect data (milliseconds)

void setup() {
    // Start serial communication (Baud Rate can be adjusted from 9600 - 115200)
    Serial.begin(115200); 
    Serial.println("FYP_DHT11 Temperature Test\n");

    // Wait for serial monitor to open
    while (!Serial) {
        delay(10);
    }

    // Perform authentication before proceeding
    int attempts = 0;
    while (attempts < maxAttempts) {
        if (authenticate()) {
            Serial.println("Authentication successful!");
            break;
        } else {
            attempts++;
            Serial.println("Authentication failed! Please try again.");
        }
    }
    if (attempts == maxAttempts) {
        Serial.println("Maximum login attempts exceeded. The Device Is Now Being Locked.");
        while (true) {
            delay(1000); // Lock the device indefinitely
        }
    }


    // Initialize the DHT sensor
    dht.begin();

    // Connect to WiFi
    connectToWiFi();

   
    // a simple webserver is set up to get the temperatures.
    
    server.on("/", HTTP_GET, [](AsyncWebServerRequest *request) {
    String html = "<html><head>";
    html += "<meta charset='UTF-8'>";
    html += "<style>";
    html += "body { background-color: #0073e6; color: #fff; font-family: Arial, sans-serif; margin: 0; padding: 0; }"; // Blue background and white text
    html += ".container { max-width: 600px; margin: 50px auto; padding: 20px; background-color: rgba(255, 255, 255, 0.9); border-radius: 10px; box-shadow: 0 0 15px rgba(0, 0, 0, 0.2); }"; // White container with transparency
    html += "h1 { text-align: center; color: #0073e6; margin-bottom: 20px; }"; // Blue heading
    html += ".sensor { margin-bottom: 20px; padding: 15px; background-color: #f0f0f0; border-radius: 8px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); }"; // Light gray sensor boxes
    html += ".sensor p { margin: 0; color: #333; font-size: 18px; }"; // Dark text for sensor data
    html += "</style>";
    html += "</head><body>";
    html += "<div class='container'>";
    html += "<h1>C300 FYP Project (DHT11 & ESP8266)</h1>";
    html += "<div class='sensor'>";
    html += "<p>Temperature: " + String(temperature) + " Â°C</p>";
    html += "</div>";
    html += "<div class='sensor'>";
    html += "<p>Humidity: " + String(humidity) + " %</p>";
    html += "</div>";
    html += "</div>";
    html += "</body></html>";
    request->send(200, "text/html", html);
});

    // Initialization.
    server.begin();
    Serial.println("HTTP server started");
}

void loop() {
    unsigned long currentMillis = millis();

    // Read humidity and temperature from DHT sensor every 15 seconds.
    if (currentMillis - previousMillis >= interval) {
        // Save the last time you collected data
        previousMillis = currentMillis;

        // Read humidity and temperature from DHT sensor
        humidity = dht.readHumidity();
        temperature = dht.readTemperature();

        // Check if readings are valid
        if (isnan(humidity) || isnan(temperature)) {
            Serial.println("Failed to read from DHT sensor!");
            return;
        }

        // Print the current humidity and temperature to the serial monitor
        Serial.print("Current humidity = ");
        Serial.print(humidity);
        Serial.print("% ");
        Serial.print("temperature = ");
        Serial.print(temperature);
        Serial.println(" C");

        // Send data to ThingSpeak
        if (client.connect(host, 80)) {
            // Create URL for the request
            String url = "/update?api_key=";
            url += apiKey;
            url += "&field1=";
            url += String(temperature);
            url += "&field2=";
            url += String(humidity);
            Serial.print("Requesting URL: ");
            Serial.println(url);

            // Send HTTP GET request to ThingSpeak
            client.print(String("GET ") + url + " HTTP/1.1\r\n" +
                         "Host: " + host + "\r\n" +
                         "Connection: close\r\n\r\n");
            delay(1000);

            // Read and print the response from ThingSpeak
            while (client.available()) {
                String line = client.readStringUntil('\r');
                Serial.print(line);
            }
            client.stop();
            Serial.println();
        } else {
            // Print an error message if the connection fails
            Serial.println("Failed to connect to ThingSpeak");
        }
    }

    delay(10); // Delay is added to help legacy devices to buffer the network flow.
}

bool authenticate() {
    br_sha256_context sha256Ctx;
    uint8_t hash[32]; // SHA256 produces a 32-byte hash
    Serial.print("Enter username: ");
    // Wait for user to enter username
    while (!Serial.available()) {
        // Wait for user input
    }
    String inputUsername = Serial.readStringUntil('\n');
    inputUsername.trim();

    Serial.print("Enter password: ");
    // Wait for user to enter password
    while (!Serial.available()) {
        // Wait for user input
    }
    String inputPassword = Serial.readStringUntil('\n');
    inputPassword.trim();

    // Hash the input password
    br_sha256_init(&sha256Ctx);
    br_sha256_update(&sha256Ctx, inputPassword.c_str(), inputPassword.length());
    br_sha256_out(&sha256Ctx, hash);

    // Convert hash to string
    String hashedInputPassword = "";
    for (int i = 0; i < sizeof(hash); i++) {
        if (hash[i] < 0x10) hashedInputPassword += "0";
        hashedInputPassword += String(hash[i], HEX);
    }

    // Check if entered credentials match the valid ones
    return (inputUsername == validUsername) && (hashedInputPassword == validPassword);
}


void connectToWiFi() {
    Serial.println();
    Serial.print("Connecting to ");
    Serial.println(ssid);

    // Start connecting to WiFi
    WiFi.begin(ssid, password);

    // Wait until the connection is established
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }

    // Print WiFi connection details
    Serial.println("\nWiFi connected");
    Serial.println("IP address: ");
    Serial.println(WiFi.localIP());
}